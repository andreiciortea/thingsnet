@base <http://www.twitter.com/> .
@prefix stn: <http://purl.org/stn/core#> .
@prefix stn-ops: <http://purl.org/stn/operations#> .
@prefix stn-http: <http://purl.org/stn/http#> .
@prefix http: <http://www.w3.org/2011/http#> .

<#platform>
    a stn:Platform ;
    stn:name "Twitter" ;
    stn-http:baseURL <https://api.twitter.com/1.1> ;
    stn-http:supportsAuth stn-http:OAuth ;
    stn-ops:consumes stn-http:JSON ;
    stn-ops:produces stn-http:JSON ;
    stn-ops:supports <#getMyAccount> ,
        <#getAccount> ,
        <#getFollowers> ,
        <#getFriends> ,
        <#follow> ,
        <#unfollow> ,
        <#sendDirectMessage> ,
        <#postTweet> ,
        <#deleteDirectMessage> ,
        <#getDirectMessage> ,
        <#getDirectMessages> .


#
# Account operations
#

<#twitterAccount>
    a stn:UserAccount ;
    stn:id _:userAccountId ;
    stn:name _:displayedName ;
    stn:description _:description .

<#twitterAccountJSONRepresentation>
    a stn-http:JSONRepresentation ;
    stn-ops:representationOf <#twitterAccount> ;
    stn-ops:contains
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:value _:userAccountId ;
        ] ;
    stn-ops:contains
        [ a stn-ops:DisplayedName ;
            stn-ops:key "name" ;
            stn-ops:value _:displayedName ;
        ] ;
    stn-ops:contains
        [ a stn-ops:Description ;
            stn-ops:key "description" ;
            stn-ops:value _:description ;
        ] .

<#getMyAccount>
    a stn-ops:GetMyUserAccount ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/account/verify_credentials.json" ;
            stn-http:requiresAuth true ;
        ] ;
    stn-ops:hasOutput <#twitterAccountJSONRepresentation> .
        

<#getAccount>
    a stn-ops:GetUserAccount ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/users/show.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Query;
        ] ;
    stn-ops:hasOutput <#twitterAccountJSONRepresentation> .


#
# Connection operations
#

<#twitterFriendsJSON>
    a stn-http:JSONArray ;
    stn-http:JSONpath "users" ;
    stn-ops:arrayOf <#twitterAccountJSONRepresentation> .

<#getFollowers>
    a stn-ops:GetConnectionsTo ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/followers/list.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Query;
        ] ;
    stn-ops:hasOutput <#twitterFriendsJSON> .
    
<#getFriends>
    a stn-ops:GetConnectionsFrom ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/friends/list.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Query;
        ] ;
    stn-ops:hasOutput <#twitterFriendsJSON> .

<#follow>
    a stn-ops:CreateConnectionTo;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "POST" ;
            http:requestURI "/friendships/create.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasOutput <#twitterAccountJSONRepresentation> .


<#unfollow>
    a stn-ops:DeleteConnectionTo ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "POST" ;
            http:requestURI "/friendships/destroy.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasOutput <#twitterAccountJSONRepresentation> .


#
# Direct messages and tweets
#

<#twitterDirectMessage>
    a stn:Message ;
    stn:id _:messageId ;
    stn:hasSender _:sender ;
    stn:hasReceiver _:receiver ;
    stn:hasBody _:body .

<#twitterDirectMessageJSON>
    a stn-http:JSONRepresentation ;
    stn-ops:representationOf <#twitterDirectMessage> ;
    stn-ops:contains
        [ a stn-ops:MessageID ;
            stn-ops:key "id_str" ;
            stn-ops:value _:messageId ;
        ] ;
    stn-ops:contains
        [ a stn-ops:UserAccountID ;
            stn-ops:key "sender_screen_name" ;
            stn-ops:value _:sender ;
        ] ;
    stn-ops:contains
        [ a stn-ops:UserAccountID ;
            stn-ops:key "receiver_screen_name" ;
            stn-ops:value _:receiver ;
        ] ;
    stn-ops:contains
        [ a stn-ops:Text ;
            stn-ops:key "text" ;
            stn-ops:value _:body ;
        ] .

<#sendDirectMessage>
    a stn-ops:SendPrivateMessage;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "POST" ;
            http:requestURI "/direct_messages/new.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:UserAccountID ;
            stn-ops:key "screen_name" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:Description ;
            stn-ops:key "text" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasOutput <#twitterDirectMessageJSON> .

<#postTweet>
    a stn-ops:PostPublicMessage;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "POST" ;
            http:requestURI "/statuses/update.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:Description ;
            stn-ops:key "status" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasOutput <#twitterDirectMessageJSON> .

<#deleteDirectMessage>
    a stn-ops:DeletePrivateMessage ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "POST" ;
            http:requestURI "/direct_messages/destroy.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:EntityID ;
            stn-ops:key "id" ;
            stn-ops:required true;
            stn-http:paramIn stn-http:Body;
        ] ;
    stn-ops:hasOutput <#twitterDirectMessageJSON> .

<#getDirectMessage>
    a stn-ops:GetMessage ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/direct_messages/show.json" ;
            stn-http:requiresAuth yes ;
        ] ;
    stn-ops:hasInput
        [ a stn-ops:EntityID ;
            stn-ops:key "id" ;
            stn-ops:required true ;
            stn-http:paramIn stn-http:Query;
        ] ;
    stn-ops:hasOutput <#twitterDirectMessageJSON> .

<#getDirectMessages>
    a stn-ops:GetMessages ;
    stn-ops:implementedAs
        [ a stn-http:STNRequest ;
            http:methodName "GET" ;
            http:requestURI "/direct_messages.json" ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:JSONArray ;
            stn-ops:arrayOf <#twitterDirectMessageJSON> .
        ] .
