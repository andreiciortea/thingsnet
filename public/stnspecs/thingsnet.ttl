@base <http://www.thingsnet.com/> .
@prefix stn: <http://purl.org/stn/core#> .
@prefix stn-ops: <http://purl.org/stn/operations#> .
@prefix stn-http: <http://purl.org/stn/http#> .
@prefix http: <http://www.w3.org/2011/http#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<#platform>
    a stn:STNPlatform ;
    stn:name "ThingsNet" ;
    stn-http:baseURL <http://localhost:9000> ;
    stn-http:supportsAuth stn-http:WebID ;
    stn-http:consumes stn-http:Turtle ;
    stn-http:produces stn-http:Turtle ;
    stn-ops:supports <#createAccount> ,
        <#getAccount> ,
        <#getAccountForAgent> ,
        <#deleteAccount> ,
        <#createConnectionTo> ,
        <#getOutConnections> ,
        <#getInConnections> ,
        <#deleteConnectionTo> ,
        <#sendMessage> ,
        <#getMessage> ,
        <#getMessages> ,
        <#deleteMessage> .



#
# Account operations
#

<#createAccount>
    a stn-ops:CreateUserAccount ;
    stn-ops:implementedAs [
            a stn-http:AuthSTNRequest ;
            http:methodName "POST" ;
            http:requestURI "/users" ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:SocialThingClass ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:SocialThingOwner ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:DisplayedName ;
        ] ;
    stn-ops:hasInput [
            a stn-ops:Description ;
        ] ;
    stn-ops:hasOutput [
            a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .

<#getAccount>
    a stn-ops:GetUserAccount ;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI ":accountUri" ;
        ] ;
    stn-ops:hasRequiredInput
        [ a stn-ops:UserAccountURI ;
            stn-http:key ":accountUri" ;
            stn-http:paramIn stn-http:Path ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .

<#getAccountForAgent>
    a stn-ops:WhoIsAgent ;
    stn-ops:implementedAs [
            a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI "/users" ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:AgentURI ;
            stn-http:key "agentUri" ;
            stn-http:paramIn stn-http:Query ;
        ] ;
    stn-ops:hasOutput [
            a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .

<#deleteAccount>
    a stn-ops:DeleteUserAccount ;
    stn-ops:implementedAs [
            a stn-http:AuthSTNRequest ;
            http:methodName "DELETE" ;
            http:requestURI "/users" ;
        ] ;
    stn-ops:hasOutput [
            a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .



#
# Connection operations
#

<#createConnectionTo>
    a stn-ops:CreateConnectionTo;
    stn-ops:implementedAs [
            a stn-http:AuthSTNRequest ;
            http:methodName "POST" ;
            http:requestURI "/connections" ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:AgentURI ;
        ] ;
    stn-ops:hasOutput [
            a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .

<#getOutConnections>
    a stn-ops:GetConnectionsFrom;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI "/connections/out" ;
        ] ;
    stn-ops:hasRequiredInput
        [ a stn-ops:UserAccountURI ;
            stn-http:key "accountUri" ;
            stn-http:paramIn stn-http:Query ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:arrayOf [ a stn:UserAccount ] ;
        ] .

<#getInConnections>
    a stn-ops:GetConnectionsTo;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI "/connections/in" ;
        ] ;
    stn-ops:hasRequiredInput
        [ a stn-ops:UserAccountURI ;
            stn-http:key "accountUri" ;
            stn-http:paramIn stn-http:Query ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:arrayOf [ a stn:UserAccount ] ;
        ] .

<#deleteConnectionTo>
    a stn-ops:DeleteConnectionTo ;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "DELETE" ;
            http:requestURI "/connections" ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:AgentURI ;
            stn-http:key "agentUri" ;
            stn-http:paramIn stn-http:Query ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:UserAccount ] ;
        ] .



#
# Message operations
#

<#sendMessage>
    a stn-ops:SendMessage;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "POST" ;
            http:requestURI "/messages" ;
        ] ;
    stn-ops:hasRequiredInput [
            a stn-ops:UserAccountURI ;
        ] ;
    stn-ops:hasInput [
            a stn-ops:MessageURI ;
        ] ;
    stn-ops:hasInput [
            a stn-ops:Subject ;
        ] ;
    stn-ops:hasInput [
            a stn-ops:MessageBody ;
        ] ;
    stn-ops:hasOutput [
            a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:Message ] ;
        ] .

<#deleteMessage>
    a stn-ops:DeletePrivateMessage ;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "DELETE" ;
            http:requestURI ":messageUri" ;
        ] ;
    stn-ops:hasRequiredInput
        [ a stn-ops:MessageURI ;
            stn-http:key "messageUri" ;
            stn-http:paramIn stn-http:Path ;
        ] .

<#getMessage>
    a stn-ops:GetMessage ;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI ":messageUri" ;
        ] ;
    stn-ops:hasRequiredInput
        [ a stn-ops:MessageURI ;
            stn-http:key "messageUri" ;
            stn-http:paramIn stn-http:Path ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:representationOf [ a stn:Message ] ;
        ] .

<#getMessages>
    a stn-ops:GetMessages ;
    stn-ops:implementedAs
        [ a stn-http:AuthSTNRequest ;
            http:methodName "GET" ;
            http:requestURI "/messages" ;
        ] ;
    stn-ops:hasOutput
        [ a stn-http:TurtleRepresentation ;
            stn-ops:arrayOf [ a stn:Message ] ;
        ] .